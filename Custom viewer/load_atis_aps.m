function aps_data=load_atis_aps(filename, flipX, flipY)
% aps_data = load_atis_aps(filename, flipX=0, flipY=0)
%
% Loads data from files generated by the StreamLogger consumer for an APS data
% stream. This function read the events from the file and looks for pair of
% conversion events. Its output consists of the inverses of the integration time
% for each succesful gray level acquisition (which are directly representatives
% of gray levels).

% timestamps are in uS
% aps_data is a structure containing the fields ts, x, y and gray
%
% flipX, flipY allow to flip the image arround the X and Y axes. If these values
% are non zero, the corresponding dimension will be flipped considering its size
% to be the value contained in the 'flip' variable (i.e. X = flipX - X)
% (They defaults to 0 if non-specified)

if ~exist('flipX','var')
    flipX = 0;
end
if ~exist('flipY','var')
    flipY = 0;
end

td_data = load_atis_data(filename, flipX, flipY);
conv_start = zeros(max(td_data.x)+1,max(td_data.y)+1);
aps_data.ts = zeros(1,sum(td_data.p==1));
aps_data.x = zeros(size(aps_data.ts));
aps_data.y = zeros(size(aps_data.ts));
aps_data.gray = zeros(size(aps_data.ts));

output_index = 1;
for i=1:length(td_data.ts)
    if td_data.p(i)==1
        aps_data.ts(output_index) = td_data.ts(i);
        aps_data.x(output_index) = td_data.x(i);
        aps_data.y(output_index) = td_data.y(i);
        aps_data.gray(output_index) = 1/(td_data.ts(i)-conv_start(td_data.x(i)+1,td_data.y(i)+1));
        output_index=output_index+1;
    else
        conv_start(td_data.x(i)+1,td_data.y(i)+1) = td_data.ts(i);
    end
end

end

